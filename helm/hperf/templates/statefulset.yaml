apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "hperf.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app: hperf
    {{- include "hperf.labels" . | nindent 4 }}
spec:
  serviceName: {{ template "hperf.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: hperf
  template:
    metadata:
      name: hperf
      labels:
        app: hperf
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "hperf.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: hperf
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - "server"
            - "--address"
            - "0.0.0.0:{{ .Values.hperf.port }}"
            - "--storage-path"
            - "/tmp/hperf/"
          ports:
            - name: server
              containerPort: {{ .Values.hperf.port}}
          volumeMounts:
            {{- if .Values.hperf.hperfVolume.type }}
            - name: hperf-volume
              mountPath: /tmp/hperf
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - hperf
              topologyKey: "kubernetes.io/hostname"
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.hperf.volumeType }}
      - name: hperf-volume
          {{- if eq .Values.hperf.volumeType "emptyDir" }}
        emptyDir:
            {{- with .Values.hperf.hperfVolume.emptyDir }}
            {{- toYaml . | nindent 10 }}
            {{- end }}
          {{- else if eq .Values.hperf.volumeType "hostPath" }}
        hostPath:
          path: {{ .Values.hperf.hperfVolume.hostPath.path | required "hostPath.path is required when using hostPath volume" }}
          type: {{ .Values.hperf.hperfVolume.hostPath.type | default "DirectoryOrCreate" }}
            {{- else if eq .Values.hperf.volumeType "persistentVolumeClaim" }}
        # Default to emptyDir if no volume type specified
        emptyDir: { }
            {{- end }}
        {{- if .Values.hperf.hperfVolume.volumeClaimTemplate }}
  volumeClaimTemplates:
    {{- toYaml .Values.hperf.hperfVolume.volumeClaimTemplate | nindent 2 }}
        {{- end }}
    {{- end }}