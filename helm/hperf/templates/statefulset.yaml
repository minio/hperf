apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "hperf.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app: hperf
    {{- include "hperf.labels" . | nindent 4 }}
spec:
  serviceName: {{ template "hperf.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: hperf
  template:
    metadata:
      name: hperf
      labels:
        app: hperf
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "hperf.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: hperf
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          args:
            - "server"
            - "--address"
            - "$(POD_IP):{{ .Values.hperf.port }}"
            - "--storage-path"
            - "/tmp/hperf/"
          ports:
            - name: server
              containerPort: {{ .Values.hperf.port}}
          volumeMounts:
            - name: {{ include "hperf.fullname" . }}-volume
              mountPath: /tmp/hperf
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - hperf
              topologyKey: "kubernetes.io/hostname"
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      volumes:
      - name: {{ include "hperf.fullname" . }}-volume
      {{- if or (hasKey .Values.hperf.hperfVolume "volumeClaimTemplate") (hasKey .Values.hperf.hperfVolume "emptyDir") (hasKey .Values.hperf.hperfVolume "hostPath" ) }}
        {{- if .Values.hperf.hperfVolume.emptyDir }}
        emptyDir:
          {{- with .Values.hperf.hperfVolume.emptyDir }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
        {{ end }}
        {{- if .Values.hperf.hperfVolume.hostPath }}
        hostPath:
          path: {{ .Values.hperf.hperfVolume.hostPath.path | required "hostPath.path is required when using hostPath volume" }}
          type: {{ .Values.hperf.hperfVolume.hostPath.type | default "DirectoryOrCreate" }}
        {{- end }}
      {{- else }}
        emptyDir:
          sizeLimit: 100Mi
      {{- end }}
  {{- if .Values.hperf.hperfVolume.volumeClaimTemplate }}
  volumeClaimTemplates:
    - metadata:
        name: {{ include "hperf.fullname" . }}-volume
        {{- with .Values.hperf.hperfVolume.volumeClaimTemplate.storageAnnotations }}
        annotations: {{- toYaml . | nindent 12 }}
        {{- end }}
      spec:
            {{- if  .Values.hperf.hperfVolume.volumeClaimTemplate.storageClassName }}
        storageClassName: {{ .Values.hperf.hperfVolume.volumeClaimTemplate.storageClassName }}
            {{- end }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.hperf.hperfVolume.volumeClaimTemplate.size }}
    {{- end }}
{{- $hasVCT := hasKey .Values.hperf.hperfVolume "volumeClaimTemplate" }}
{{- $hasEmptyDir := hasKey .Values.hperf.hperfVolume "emptyDir" }}
{{- $hasHostPath := hasKey .Values.hperf.hperfVolume "hostPath" }}
{{- if or (and $hasVCT $hasEmptyDir) (and $hasVCT $hasHostPath) (and $hasEmptyDir $hasHostPath) }}
  {{- fail "Only one volume type can be specified at the time: volumeClaimTemplate, emptyDir, or hostPath" }}
{{- end }}